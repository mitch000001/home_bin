#! /bin/bash
have vmrun &&
  _vmrun()
{
  local current prev1 options stopping_power_command_options starting_power_command_options
  COMPREPLY=()
  current="${COMP_WORDS[COMP_CWORD]}"
  prev1="${COMP_WORDS[COMP_CWORD-1]}"
  #  The basic options we'll complete.
  commands="start stop list snapshot listSnapshots deleteSnapshot revertToSnapshot reset suspend pause unpause deleteVM clone"
  stopping_power_command_options="hard soft"
  starting_power_command_options="gui nogui"
  list_snapshot_command_options="showTree"
  delete_snapshot_command_options="andDeleteChildren"
  clone_options="full linked"
  clone_settings="-snapshot= -cloneName="

  #
  #  Complete the arguments to some of the basic commands.
  #
  case "${prev1}" in
    vmrun)
      COMPREPLY=( $(compgen -W "${commands}" -- ${current}) )
      return 0
      ;;
    start|snapshot|deleteSnapshot|revertToSnapshot|listSnapshots|deleteVM|clone)
      __complete_vmx_files
      return 0
      ;;
    stop|reset|suspend|pause)
      local running_machines=`vmrun list | grep '.vmx'`;
      COMPREPLY=( $(compgen -W "${running_machines}" -- ${current}) );
      return 0;
      ;;
    unpause)
      # TODO: is this the right implementation for paused machines?
      local running_machines=`vmrun list | grep '.vmx'`;
      COMPREPLY=( $(compgen -W "${running_machines}" -- ${current}) );
      return 0;
      ;;
    *)
      if [ "${COMP_CWORD}" -ge 3 ]; then
        local prev2="${COMP_WORDS[COMP_CWORD-2]}"
        case "${prev2}" in
          stop|reset|suspend)
            COMPREPLY=( $(compgen -W "${stopping_power_command_options}" -- ${current}) )
            return 0
            ;;
          start)
            COMPREPLY=( $(compgen -W "${starting_power_command_options}" -- ${current}) )
            return 0
            ;;
          deleteSnapshot|revertToSnapshot)
            local snapshots_for_machine=`vmrun listSnapshots ${prev1}`;
            COMPREPLY=( $(compgen -W "${snapshots_for_machine}" -- ${current}) )
            return 0
            ;;
          listSnapshots)
            COMPREPLY=( $(compgen -W "${list_snapshot_command_options}" -- ${current}) )
            return 0
            ;;
          clone)
            __complete_vmx_files
            return 0
            ;;
          *)
            if [ "${COMP_CWORD}" -ge 4 ]; then
              local prev3="${COMP_WORDS[COMP_CWORD-3]}"
              case "${prev3}" in
                deleteSnapshot)
                  COMPREPLY=( $(compgen -W "${delete_snapshot_command_options}" -- ${current}) )
                  return 0
                  ;;
                clone)
                  COMPREPLY=( $(compgen -W "${clone_options}" -- ${current}) )
                  return 0
                  ;;
                *)
                  if [ "${COMP_CWORD}" -ge 5 ]; then
                    local prev4="${COMP_WORDS[COMP_CWORD-4]}"
                    case "${prev4}" in
                      clone)
                        COMPREPLY=( $(compgen -W "${clone_settings}" -- ${current}) )
                        return 0
                        ;;
                      *)
                        return 0
                        ;;
                    esac
                  fi
                  return 0
                  ;;
              esac
            fi
            return 0
            ;;
        esac
      fi
      return 0
      ;;
  esac

} &&
  complete -F _vmrun vmrun

__complete_vmx_files() {

  if [ -n "$VM_PATH" ]
  then
    local names=`ls -1 $VM_PATH/*/*.vmx`;
    COMPREPLY=( $(compgen -W "${names}" -- ${current}) )
    return 0
  else
    local IFS=$'\n'
    local vmx_xspec="!*.@(vmx)"
    _expand || return 0

    _compopt_o_filenames
    COMPREPLY=( $( compgen -f -X "$vmx_xspec" -- "$current" ) \
      $( compgen -d -- "$current" ) )
    return 0
  fi
}

# VMRUN OUTPUT
# vmrun version 1.13.0 build-1331545
#
# Usage: vmrun [AUTHENTICATION-FLAGS] COMMAND [PARAMETERS]
#
#
#
# AUTHENTICATION-FLAGS
# --------------------
# These must appear before the command and any command parameters.
#
#    -h <hostName>  (not needed for Fusion)
#    -P <hostPort>  (not needed for Fusion)
#    -T <hostType> (ws|fusion)
#    -u <userName in host OS>  (not needed for Fusion)
#    -p <password in host OS>  (not needed for Fusion)
#    -vp <password for encrypted virtual machine>
#    -gu <userName in guest OS>
#    -gp <password in guest OS>
#
#
#
# POWER COMMANDS           PARAMETERS           DESCRIPTION
# --------------           ----------           -----------
# start                    Path to vmx file     Start a VM or Team
#                          [gui|nogui]
#
# stop                     Path to vmx file     Stop a VM or Team
#                          [hard|soft]
#
# reset                    Path to vmx file     Reset a VM or Team
#                          [hard|soft]
#
# suspend                  Path to vmx file     Suspend a VM or Team
#                          [hard|soft]
#
# pause                    Path to vmx file     Pause a VM
#
# unpause                  Path to vmx file     Unpause a VM
#
#
#
# SNAPSHOT COMMANDS        PARAMETERS           DESCRIPTION
# -----------------        ----------           -----------
# listSnapshots            Path to vmx file     List all snapshots in a VM
#                          [showTree]
#
# snapshot                 Path to vmx file     Create a snapshot of a VM
#                          Snapshot name
#
# deleteSnapshot           Path to vmx file     Remove a snapshot from a VM
#                          Snapshot name
#                          [andDeleteChildren]
#
# revertToSnapshot         Path to vmx file     Set VM state to a snapshot
#                          Snapshot name
#
#
#
# GUEST OS COMMANDS        PARAMETERS           DESCRIPTION
# -----------------        ----------           -----------
# runProgramInGuest        Path to vmx file     Run a program in Guest OS
#                          [-noWait]
#                          [-activeWindow]
#                          [-interactive]
#                          Complete-Path-To-Program
#                          [Program arguments]
#
# fileExistsInGuest        Path to vmx file     Check if a file exists in Guest OS
#                          Path to file in guest
#
# directoryExistsInGuest   Path to vmx file     Check if a directory exists in Guest OS
#                          Path to directory in guest
#
# setSharedFolderState     Path to vmx file     Modify a Host-Guest shared folder
#                          Share name
#                          Host path
#                          writable | readonly
#
# addSharedFolder          Path to vmx file     Add a Host-Guest shared folder
#                          Share name
#                          New host path
#
# removeSharedFolder       Path to vmx file     Remove a Host-Guest shared folder
#                          Share name
#
# enableSharedFolders      Path to vmx file     Enable shared folders in Guest
#                          [runtime]
#
# disableSharedFolders     Path to vmx file     Disable shared folders in Guest
#                          [runtime]
#
# listProcessesInGuest     Path to vmx file     List running processes in Guest OS
#
# killProcessInGuest       Path to vmx file     Kill a process in Guest OS
#                          process id
#
# runScriptInGuest         Path to vmx file     Run a script in Guest OS
#                          [-noWait]
#                          [-activeWindow]
#                          [-interactive]
#                          Interpreter path
#                          Script text
#
# deleteFileInGuest        Path to vmx file     Delete a file in Guest OS
# Path in guest
#
# createDirectoryInGuest   Path to vmx file     Create a directory in Guest OS
# Directory path in guest
#
# deleteDirectoryInGuest   Path to vmx file     Delete a directory in Guest OS
# Directory path in guest
#
# CreateTempfileInGuest    Path to vmx file     Create a temporary file in Guest OS
#
# listDirectoryInGuest     Path to vmx file     List a directory in Guest OS
#                          Directory path in guest
#
# CopyFileFromHostToGuest  Path to vmx file     Copy a file from host OS to guest OS
# Path on host             Path in guest
#
#
# CopyFileFromGuestToHost  Path to vmx file     Copy a file from guest OS to host OS
# Path in guest            Path on host
#
#
# renameFileInGuest        Path to vmx file     Rename a file in Guest OS
#                          Original name
#                          New name
#
# captureScreen            Path to vmx file     Capture the screen of the VM to a local file
# Path on host
#
# writeVariable            Path to vmx file     Write a variable in the VM state
#                          [runtimeConfig|guestEnv|guestVar]
#                          variable name
#                          variable value
#
# readVariable             Path to vmx file     Read a variable in the VM state
#                          [runtimeConfig|guestEnv|guestVar]
#                          variable name
#
# getGuestIPAddress        Path to vmx file     Gets the IP address of the guest
#                          [-wait]
#
#
#
# VPROBE COMMANDS          PARAMETERS           DESCRIPTION
# ---------------          ----------           -----------
# vprobeVersion            Path to vmx file     List VP version
#
# vprobeLoad               Path to vmx file     Load VP script
#                          'VP script text'
#
# vprobeLoadFile           Path to vmx file     Load VP file
#                          Path to VP file
#
# vprobeReset              Path to vmx file     Disable all vprobes
#
# vprobeListProbes         Path to vmx file     List probes
#
# vprobeListGlobals        Path to vmx file     List global variables
#
#
#
# GENERAL COMMANDS         PARAMETERS           DESCRIPTION
# ----------------         ----------           -----------
# list                                          List all running VMs
#
# upgradevm                Path to vmx file     Upgrade VM file format, virtual hw
#
# installTools             Path to vmx file     Install Tools in Guest
#
# checkToolsState          Path to vmx file     Check the current Tools state
#
# deleteVM                 Path to vmx file     Delete a VM
#
# clone                    Path to vmx file     Create a copy of the VM
#                          Path to destination vmx file
#                          full|linked
#                          [-snapshot=Snapshot Name]
#                          [-cloneName=Name]
#
#
#
#
# Examples:
#
#
# Starting a virtual machine with Workstation on a Windows host
#    vmrun -T ws start "c:\my VMs\myVM.vmx"
#
#
# Stopping a virtual machine on an ESX host
#    vmrun -T esx -h https://myHost.com/sdk -u hostUser -p hostPassword stop "[storage1] vm/myVM.vmx"
#
#
# Running a program in a virtual machine with Workstation on a Windows host with Windows guest
#    vmrun -T ws -gu guestUser -gp guestPassword runProgramInGuest "c:\my VMs\myVM.vmx" "c:\Program Files\myProgram.exe"
#
#
# Running a program in a virtual machine with Server on a Linux host with Linux guest
#    vmrun -T server -h https://myHost.com:8333/sdk -u hostUser -p hostPassword -gu guestUser -gp guestPassword runProgramInGuest "[standard] vm/myVM.vmx" /usr/bin/X11/xclock -display :0
#
#
# Creating a snapshot of a virtual machine with Workstation on a Windows host
#    vmrun -T ws snapshot "c:\my VMs\myVM.vmx" mySnapshot
#
#
# Reverting to a snapshot with Workstation on a Windows host
#    vmrun -T ws revertToSnapshot "c:\my VMs\myVM.vmx" mySnapshot
#
#
# Deleting a snapshot with Workstation on a Windows host
#    vmrun -T ws deleteSnapshot "c:\my VMs\myVM.vmx" mySnapshot
#
#
# Enabling Shared Folders with Workstation on a Windows host
#    vmrun -T ws enableSharedFolders "c:\my VMs\myVM.vmx"
#
